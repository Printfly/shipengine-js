@code_type typescript .ts
@comment_type /* %s */
@add_css css/normalize.css
@add_css css/fonts.css
@add_css css/milligram.css
@add_css css/main.css

@title Validate and Normalize Addresses

@s Introduction
[ShipEngine](https://www.shipengine.com) allows you to validate an address before using it to create a shipment to ensure accurate delivery of your packages.

Address validation ensures accurate addresses and can lead to reduced shipping costs by preventing address correction surcharges. ShipEngine cross references multiple databases to validate addresses and identify potential deliverability issues.

@s Install the ShipEngine library

--- install
npm install shipengine@alpha
---

@s Initialize the ShipEngine library

--- initialize
const ShipEngine = require('shipengine');

const shipengine = new ShipEngine('my_api_key');
---

@s Validate an Address

You might want to validate that an address is correct.
The simplest way to accomplish this is by calling [validateAddress](../api/classes/addressesservice.html#validateaddress) with the necessary information to build an [Address](../api/classes/address.html).
This accepts a single address and returns a boolean.

--- validate address args
const isValid = await shipengine.validateAddress({
  street: '1 E 161 St',
  cityLocality: 'The Bronx',
  postalCode: '10451',
  stateProvince: 'NY',
  country: 'US',
});

console.log(isValid)
console.assert(isValid, 'address should be valid');
---


@s Normalize an Address

When you [normalize an address](../api/classes/addressesservice.html#normalizeaddress), you are returned an [altered address](../api/classes/address.html).
You can pass an incomplete address as an argument: for example, maybe you don't know the `postalCode`.

--- normalize address args
try {
  const result = await shipengine.normalizeAddress({
    street: ['1060 W Addison St'],
    cityLocality: 'Chicago',
    stateProvince: 'IL',
    country: 'US',
});
  console.log(`normalized street is: ${result.street}`);
  console.assert(!result.isResidential, 'should be commercial');
} catch (err) {
  console.error(err)
}
---
 [normalizeAddress](../api/classes/addressesservice.html#normalizeaddress) will throw a [ShipEngineError](../api/classes/shipengineerror.html) if the request was recieved but normalization was otherwise unsuccessful. Normalization may fail if the provided address query cannot be found or is missing required fields.

--- error handling
try {
  await shipengine.normalizeAddress({ street: '1234 Main St' })
} catch(err) {
  if (err instanceof ShipEngineError) {
    console.assert(err !== undefined, 'address query missing too much information');
  } else {
    // unable to complete request at all (e.g. network connection)
    console.error(err)
  }
}
---

@s Query an Address

If you want a list errors along with address normalization, you can use the [queryAddress](../api/classes/addressesservice.html#queryaddress) method.

--- query address
const result = await shipengine.queryAddress({
  street: ['1 E 161 St'],
  cityLocality: 'The Bronx',
  stateProvince: 'NY',
  postalCode: '10451',
  country: 'US'
})

console.assert(!result.errors.length, 'should be no errors')
console.log(`the normalized address is: ${JSON.stringify(result.normalized)}.`)
---




@s Programs

Swap out initialization codeblock
--- initialize --- :=
import { default as ShipEngine } from '../../src';

import 'dotenv/config';
const shipengine = new ShipEngine(process.env.API_KEY);
---

--- wrapper start  ---
(async () => {
---

--- wrapper end ---
})()
---

--- validate-address.ts
@{initialize}

@{wrapper start}

@{validate address args}

@{wrapper end}
---

--- initialize normalize
import { default as ShipEngine, ShipEngineError } from '../../src'

import 'dotenv/config';
const shipengine = new ShipEngine(process.env.API_KEY);
---

--- normalize-address.ts
@{initialize normalize}

@{wrapper start}

@{normalize address args}

@{error handling}

@{wrapper end}
---

--- query-address.ts
@{initialize}

@{wrapper start}

@{query address}

@{wrapper end}
---
