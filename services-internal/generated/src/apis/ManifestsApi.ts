/* tslint:disable */
/* eslint-disable */
/**
 * ShipEngine API
 * ShipEngine\'s easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine\'s features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you\'re new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don\'t know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202010261510
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponseBody1,
    ErrorResponseBody1FromJSON,
    ErrorResponseBody1ToJSON,
    ListManifestsResponseBody1,
    ListManifestsResponseBody1FromJSON,
    ListManifestsResponseBody1ToJSON,
    UNKNOWN_BASE_TYPE,
    UNKNOWN_BASE_TYPEFromJSON,
    UNKNOWN_BASE_TYPEToJSON,
} from '../models';

export interface CreateManifestRequest {
    uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE;
}

export interface GetManifestByIdRequest {
    manifestId: string;
}

export interface ListManifestsRequest {
    warehouseId?: string;
    shipDateStart?: Date;
    shipDateEnd?: Date;
    createdAtStart?: Date;
    createdAtEnd?: Date;
    carrierId?: string;
    page?: number;
    pageSize?: number;
    labelIds?: Array<string>;
}

/**
 * 
 */
export class ManifestsApi extends runtime.BaseAPI {

    /**
     * Each ShipEngine manifest is created for a specific warehouse, so you\'ll need to provide the warehouse_id rather than the ship_from address. You can create a warehouse for each location that you want to create manifests for. 
     * Create Manifest
     */
    async createManifestRaw(requestParameters: CreateManifestRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.uNKNOWNBASETYPE === null || requestParameters.uNKNOWNBASETYPE === undefined) {
            throw new runtime.RequiredError('uNKNOWNBASETYPE','Required parameter requestParameters.uNKNOWNBASETYPE was null or undefined when calling createManifest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/manifests`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UNKNOWN_BASE_TYPEToJSON(requestParameters.uNKNOWNBASETYPE),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Each ShipEngine manifest is created for a specific warehouse, so you\'ll need to provide the warehouse_id rather than the ship_from address. You can create a warehouse for each location that you want to create manifests for. 
     * Create Manifest
     */
    async createManifest(requestParameters: CreateManifestRequest): Promise<object> {
        const response = await this.createManifestRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Manifest By Id
     * Get Manifest By Id
     */
    async getManifestByIdRaw(requestParameters: GetManifestByIdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.manifestId === null || requestParameters.manifestId === undefined) {
            throw new runtime.RequiredError('manifestId','Required parameter requestParameters.manifestId was null or undefined when calling getManifestById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/manifests/{manifest_id}`.replace(`{${"manifest_id"}}`, encodeURIComponent(String(requestParameters.manifestId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Manifest By Id
     * Get Manifest By Id
     */
    async getManifestById(requestParameters: GetManifestByIdRequest): Promise<object> {
        const response = await this.getManifestByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Similar to querying shipments, we allow you to query manifests since there will likely be a large number over a long period of time.
     * List Manifests
     */
    async listManifestsRaw(requestParameters: ListManifestsRequest): Promise<runtime.ApiResponse<ListManifestsResponseBody1>> {
        const queryParameters: any = {};

        if (requestParameters.warehouseId !== undefined) {
            queryParameters['warehouse_id'] = requestParameters.warehouseId;
        }

        if (requestParameters.shipDateStart !== undefined) {
            queryParameters['ship_date_start'] = (requestParameters.shipDateStart as any).toISOString();
        }

        if (requestParameters.shipDateEnd !== undefined) {
            queryParameters['ship_date_end'] = (requestParameters.shipDateEnd as any).toISOString();
        }

        if (requestParameters.createdAtStart !== undefined) {
            queryParameters['created_at_start'] = (requestParameters.createdAtStart as any).toISOString();
        }

        if (requestParameters.createdAtEnd !== undefined) {
            queryParameters['created_at_end'] = (requestParameters.createdAtEnd as any).toISOString();
        }

        if (requestParameters.carrierId !== undefined) {
            queryParameters['carrier_id'] = requestParameters.carrierId;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.labelIds) {
            queryParameters['label_ids'] = requestParameters.labelIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/manifests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListManifestsResponseBody1FromJSON(jsonValue));
    }

    /**
     * Similar to querying shipments, we allow you to query manifests since there will likely be a large number over a long period of time.
     * List Manifests
     */
    async listManifests(requestParameters: ListManifestsRequest): Promise<ListManifestsResponseBody1> {
        const response = await this.listManifestsRaw(requestParameters);
        return await response.value();
    }

}
