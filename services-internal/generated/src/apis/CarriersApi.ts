/* tslint:disable */
/* eslint-disable */
/**
 * ShipEngine API
 * ShipEngine\'s easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine\'s features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you\'re new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don\'t know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202010261510
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddFundsToCarrierResponseBody1,
    AddFundsToCarrierResponseBody1FromJSON,
    AddFundsToCarrierResponseBody1ToJSON,
    ErrorResponseBody1,
    ErrorResponseBody1FromJSON,
    ErrorResponseBody1ToJSON,
    GetCarrierOptionsResponseBody1,
    GetCarrierOptionsResponseBody1FromJSON,
    GetCarrierOptionsResponseBody1ToJSON,
    ListCarrierPackageTypesResponseBody1,
    ListCarrierPackageTypesResponseBody1FromJSON,
    ListCarrierPackageTypesResponseBody1ToJSON,
    ListCarrierServicesResponseBody1,
    ListCarrierServicesResponseBody1FromJSON,
    ListCarrierServicesResponseBody1ToJSON,
    UNKNOWN_BASE_TYPE,
    UNKNOWN_BASE_TYPEFromJSON,
    UNKNOWN_BASE_TYPEToJSON,
} from '../models';

export interface AddFundsToCarrierRequest {
    carrierId: string;
    uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE;
}

export interface GetCarrierByIdRequest {
    carrierId: string;
}

export interface GetCarrierOptionsRequest {
    carrierId: string;
}

export interface ListCarrierPackageTypesRequest {
    carrierId: string;
}

export interface ListCarrierServicesRequest {
    carrierId: string;
}

/**
 * 
 */
export class CarriersApi extends runtime.BaseAPI {

    /**
     * Add Funds To A Carrier
     * Add Funds To Carrier
     */
    async addFundsToCarrierRaw(requestParameters: AddFundsToCarrierRequest): Promise<runtime.ApiResponse<AddFundsToCarrierResponseBody1>> {
        if (requestParameters.carrierId === null || requestParameters.carrierId === undefined) {
            throw new runtime.RequiredError('carrierId','Required parameter requestParameters.carrierId was null or undefined when calling addFundsToCarrier.');
        }

        if (requestParameters.uNKNOWNBASETYPE === null || requestParameters.uNKNOWNBASETYPE === undefined) {
            throw new runtime.RequiredError('uNKNOWNBASETYPE','Required parameter requestParameters.uNKNOWNBASETYPE was null or undefined when calling addFundsToCarrier.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/carriers/{carrier_id}/add_funds`.replace(`{${"carrier_id"}}`, encodeURIComponent(String(requestParameters.carrierId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UNKNOWN_BASE_TYPEToJSON(requestParameters.uNKNOWNBASETYPE),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AddFundsToCarrierResponseBody1FromJSON(jsonValue));
    }

    /**
     * Add Funds To A Carrier
     * Add Funds To Carrier
     */
    async addFundsToCarrier(requestParameters: AddFundsToCarrierRequest): Promise<AddFundsToCarrierResponseBody1> {
        const response = await this.addFundsToCarrierRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrive carrier info by ID
     * Get Carrier By ID
     */
    async getCarrierByIdRaw(requestParameters: GetCarrierByIdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.carrierId === null || requestParameters.carrierId === undefined) {
            throw new runtime.RequiredError('carrierId','Required parameter requestParameters.carrierId was null or undefined when calling getCarrierById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/carriers/{carrier_id}`.replace(`{${"carrier_id"}}`, encodeURIComponent(String(requestParameters.carrierId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrive carrier info by ID
     * Get Carrier By ID
     */
    async getCarrierById(requestParameters: GetCarrierByIdRequest): Promise<object> {
        const response = await this.getCarrierByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a list of the options available for the carrier
     * Get Carrier Options
     */
    async getCarrierOptionsRaw(requestParameters: GetCarrierOptionsRequest): Promise<runtime.ApiResponse<GetCarrierOptionsResponseBody1>> {
        if (requestParameters.carrierId === null || requestParameters.carrierId === undefined) {
            throw new runtime.RequiredError('carrierId','Required parameter requestParameters.carrierId was null or undefined when calling getCarrierOptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/carriers/{carrier_id}/options`.replace(`{${"carrier_id"}}`, encodeURIComponent(String(requestParameters.carrierId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCarrierOptionsResponseBody1FromJSON(jsonValue));
    }

    /**
     * Get a list of the options available for the carrier
     * Get Carrier Options
     */
    async getCarrierOptions(requestParameters: GetCarrierOptionsRequest): Promise<GetCarrierOptionsResponseBody1> {
        const response = await this.getCarrierOptionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * List the package types associated with the carrier
     * List Carrier Package Types
     */
    async listCarrierPackageTypesRaw(requestParameters: ListCarrierPackageTypesRequest): Promise<runtime.ApiResponse<ListCarrierPackageTypesResponseBody1>> {
        if (requestParameters.carrierId === null || requestParameters.carrierId === undefined) {
            throw new runtime.RequiredError('carrierId','Required parameter requestParameters.carrierId was null or undefined when calling listCarrierPackageTypes.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/carriers/{carrier_id}/packages`.replace(`{${"carrier_id"}}`, encodeURIComponent(String(requestParameters.carrierId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCarrierPackageTypesResponseBody1FromJSON(jsonValue));
    }

    /**
     * List the package types associated with the carrier
     * List Carrier Package Types
     */
    async listCarrierPackageTypes(requestParameters: ListCarrierPackageTypesRequest): Promise<ListCarrierPackageTypesResponseBody1> {
        const response = await this.listCarrierPackageTypesRaw(requestParameters);
        return await response.value();
    }

    /**
     * List the services associated with the carrier ID
     * List Carrier Services
     */
    async listCarrierServicesRaw(requestParameters: ListCarrierServicesRequest): Promise<runtime.ApiResponse<ListCarrierServicesResponseBody1>> {
        if (requestParameters.carrierId === null || requestParameters.carrierId === undefined) {
            throw new runtime.RequiredError('carrierId','Required parameter requestParameters.carrierId was null or undefined when calling listCarrierServices.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/carriers/{carrier_id}/services`.replace(`{${"carrier_id"}}`, encodeURIComponent(String(requestParameters.carrierId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCarrierServicesResponseBody1FromJSON(jsonValue));
    }

    /**
     * List the services associated with the carrier ID
     * List Carrier Services
     */
    async listCarrierServices(requestParameters: ListCarrierServicesRequest): Promise<ListCarrierServicesResponseBody1> {
        const response = await this.listCarrierServicesRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all carriers that have been added to this account
     * List Carriers
     */
    async listCarriersRaw(): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/carriers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List all carriers that have been added to this account
     * List Carriers
     */
    async listCarriers(): Promise<object> {
        const response = await this.listCarriersRaw();
        return await response.value();
    }

}
