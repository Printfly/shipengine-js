/* tslint:disable */
/* eslint-disable */
/**
 * ShipEngine API
 * ShipEngine\'s easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine\'s features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you\'re new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don\'t know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202010261510
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BulkRate,
    BulkRateFromJSON,
    BulkRateToJSON,
    CalculateRatesRequestBody,
    CalculateRatesRequestBodyFromJSON,
    CalculateRatesRequestBodyToJSON,
    CalculateRatesResponseBody,
    CalculateRatesResponseBodyFromJSON,
    CalculateRatesResponseBodyToJSON,
    CompareBulkRatesRequestBody,
    CompareBulkRatesRequestBodyFromJSON,
    CompareBulkRatesRequestBodyToJSON,
    ErrorResponseBody,
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    EstimateRatesRequestBody,
    EstimateRatesRequestBodyFromJSON,
    EstimateRatesRequestBodyToJSON,
    GetRateByIdResponseBody,
    GetRateByIdResponseBodyFromJSON,
    GetRateByIdResponseBodyToJSON,
    Rate estimate,
    Rate estimateFromJSON,
    Rate estimateToJSON,
    RateEstimateOptions,
    RateEstimateOptionsFromJSON,
    RateEstimateOptionsToJSON,
    RateRequestOptions,
    RateRequestOptionsFromJSON,
    RateRequestOptionsToJSON,
    RateRequestRateOptions,
    RateRequestRateOptionsFromJSON,
    RateRequestRateOptionsToJSON,
} from '../models';

export interface CalculateRatesRequest {
    calculateRatesRequestBody: CalculateRatesRequestBody;
}

export interface CompareBulkRatesRequest {
    compareBulkRatesRequestBody: CompareBulkRatesRequestBody;
}

export interface EstimateRatesRequest {
    estimateRatesRequestBody: EstimateRatesRequestBody;
}

export interface GetRateByIdRequest {
    rateId: string;
}

/**
 * 
 */
export class RatesApi extends runtime.BaseAPI {

    /**
     * It\'s not uncommon that you want to give your customer the choice between whether they want to ship the fastest, cheapest, or the most trusted route. Most companies don\'t solely ship things using a single shipping option; so we provide functionality to show you all your options! 
     * Get Shipping Rates
     */
    async calculateRatesRaw(requestParameters: CalculateRatesRequest): Promise<runtime.ApiResponse<CalculateRatesResponseBody>> {
        if (requestParameters.calculateRatesRequestBody === null || requestParameters.calculateRatesRequestBody === undefined) {
            throw new runtime.RequiredError('calculateRatesRequestBody','Required parameter requestParameters.calculateRatesRequestBody was null or undefined when calling calculateRates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/rates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CalculateRatesRequestBodyToJSON(requestParameters.calculateRatesRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CalculateRatesResponseBodyFromJSON(jsonValue));
    }

    /**
     * It\'s not uncommon that you want to give your customer the choice between whether they want to ship the fastest, cheapest, or the most trusted route. Most companies don\'t solely ship things using a single shipping option; so we provide functionality to show you all your options! 
     * Get Shipping Rates
     */
    async calculateRates(requestParameters: CalculateRatesRequest): Promise<CalculateRatesResponseBody> {
        const response = await this.calculateRatesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Bulk Shipment Rates
     * Get Bulk Rates
     */
    async compareBulkRatesRaw(requestParameters: CompareBulkRatesRequest): Promise<runtime.ApiResponse<Array<BulkRate>>> {
        if (requestParameters.compareBulkRatesRequestBody === null || requestParameters.compareBulkRatesRequestBody === undefined) {
            throw new runtime.RequiredError('compareBulkRatesRequestBody','Required parameter requestParameters.compareBulkRatesRequestBody was null or undefined when calling compareBulkRates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/rates/bulk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompareBulkRatesRequestBodyToJSON(requestParameters.compareBulkRatesRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BulkRateFromJSON));
    }

    /**
     * Get Bulk Shipment Rates
     * Get Bulk Rates
     */
    async compareBulkRates(requestParameters: CompareBulkRatesRequest): Promise<Array<BulkRate>> {
        const response = await this.compareBulkRatesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Rate Estimates
     * Estimate Rates
     */
    async estimateRatesRaw(requestParameters: EstimateRatesRequest): Promise<runtime.ApiResponse<Array<Rate estimate>>> {
        if (requestParameters.estimateRatesRequestBody === null || requestParameters.estimateRatesRequestBody === undefined) {
            throw new runtime.RequiredError('estimateRatesRequestBody','Required parameter requestParameters.estimateRatesRequestBody was null or undefined when calling estimateRates.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/rates/estimate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EstimateRatesRequestBodyToJSON(requestParameters.estimateRatesRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(Rate estimateFromJSON));
    }

    /**
     * Get Rate Estimates
     * Estimate Rates
     */
    async estimateRates(requestParameters: EstimateRatesRequest): Promise<Array<Rate estimate>> {
        const response = await this.estimateRatesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a previously queried rate by its ID
     * Get Rate By ID
     */
    async getRateByIdRaw(requestParameters: GetRateByIdRequest): Promise<runtime.ApiResponse<GetRateByIdResponseBody>> {
        if (requestParameters.rateId === null || requestParameters.rateId === undefined) {
            throw new runtime.RequiredError('rateId','Required parameter requestParameters.rateId was null or undefined when calling getRateById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/rates/{rate_id}`.replace(`{${"rate_id"}}`, encodeURIComponent(String(requestParameters.rateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetRateByIdResponseBodyFromJSON(jsonValue));
    }

    /**
     * Retrieve a previously queried rate by its ID
     * Get Rate By ID
     */
    async getRateById(requestParameters: GetRateByIdRequest): Promise<GetRateByIdResponseBody> {
        const response = await this.getRateByIdRaw(requestParameters);
        return await response.value();
    }

}
