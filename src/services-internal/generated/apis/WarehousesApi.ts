/* tslint:disable */
/* eslint-disable */
/**
 * ShipEngine API
 * ShipEngine\'s easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine\'s features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you\'re new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don\'t know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202010261510
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateWarehouseRequestBody,
    CreateWarehouseRequestBodyFromJSON,
    CreateWarehouseRequestBodyToJSON,
    CreateWarehouseResponseBody,
    CreateWarehouseResponseBodyFromJSON,
    CreateWarehouseResponseBodyToJSON,
    ErrorResponseBody,
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    GetWarehouseByIdResponseBody,
    GetWarehouseByIdResponseBodyFromJSON,
    GetWarehouseByIdResponseBodyToJSON,
    ListWarehousesResponseBody,
    ListWarehousesResponseBodyFromJSON,
    ListWarehousesResponseBodyToJSON,
    UpdateWarehouseRequestBody,
    UpdateWarehouseRequestBodyFromJSON,
    UpdateWarehouseRequestBodyToJSON,
    Warehouse,
    WarehouseFromJSON,
    WarehouseToJSON,
} from '../models';

export interface CreateWarehouseRequest {
    createWarehouseRequestBody: CreateWarehouseRequestBody;
}

export interface DeleteWarehouseRequest {
    warehouseId: string;
}

export interface GetWarehouseByIdRequest {
    warehouseId: string;
}

export interface UpdateWarehouseRequest {
    warehouseId: string;
    updateWarehouseRequestBody: UpdateWarehouseRequestBody;
}

/**
 * 
 */
export class WarehousesApi extends runtime.BaseAPI {

    /**
     * Create a warehouse location that you can use to create shipping items by simply passing in the generated warehouse id. If the return address is not supplied in the request body then it is assumed that the origin address is the return address as well 
     * Create Warehouse
     */
    async createWarehouseRaw(requestParameters: CreateWarehouseRequest): Promise<runtime.ApiResponse<CreateWarehouseResponseBody>> {
        if (requestParameters.createWarehouseRequestBody === null || requestParameters.createWarehouseRequestBody === undefined) {
            throw new runtime.RequiredError('createWarehouseRequestBody','Required parameter requestParameters.createWarehouseRequestBody was null or undefined when calling createWarehouse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/warehouses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateWarehouseRequestBodyToJSON(requestParameters.createWarehouseRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateWarehouseResponseBodyFromJSON(jsonValue));
    }

    /**
     * Create a warehouse location that you can use to create shipping items by simply passing in the generated warehouse id. If the return address is not supplied in the request body then it is assumed that the origin address is the return address as well 
     * Create Warehouse
     */
    async createWarehouse(requestParameters: CreateWarehouseRequest): Promise<CreateWarehouseResponseBody> {
        const response = await this.createWarehouseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a warehouse by ID
     * Delete Warehouse By ID
     */
    async deleteWarehouseRaw(requestParameters: DeleteWarehouseRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.warehouseId === null || requestParameters.warehouseId === undefined) {
            throw new runtime.RequiredError('warehouseId','Required parameter requestParameters.warehouseId was null or undefined when calling deleteWarehouse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/warehouses/{warehouse_id}`.replace(`{${"warehouse_id"}}`, encodeURIComponent(String(requestParameters.warehouseId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete a warehouse by ID
     * Delete Warehouse By ID
     */
    async deleteWarehouse(requestParameters: DeleteWarehouseRequest): Promise<string> {
        const response = await this.deleteWarehouseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve warehouse data based on the warehouse ID
     * Get Warehouse By Id
     */
    async getWarehouseByIdRaw(requestParameters: GetWarehouseByIdRequest): Promise<runtime.ApiResponse<GetWarehouseByIdResponseBody>> {
        if (requestParameters.warehouseId === null || requestParameters.warehouseId === undefined) {
            throw new runtime.RequiredError('warehouseId','Required parameter requestParameters.warehouseId was null or undefined when calling getWarehouseById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/warehouses/{warehouse_id}`.replace(`{${"warehouse_id"}}`, encodeURIComponent(String(requestParameters.warehouseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetWarehouseByIdResponseBodyFromJSON(jsonValue));
    }

    /**
     * Retrieve warehouse data based on the warehouse ID
     * Get Warehouse By Id
     */
    async getWarehouseById(requestParameters: GetWarehouseByIdRequest): Promise<GetWarehouseByIdResponseBody> {
        const response = await this.getWarehouseByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a list of warehouses associated with this account.
     * List Warehouses
     */
    async listWarehousesRaw(): Promise<runtime.ApiResponse<ListWarehousesResponseBody>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/warehouses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListWarehousesResponseBodyFromJSON(jsonValue));
    }

    /**
     * Retrieve a list of warehouses associated with this account.
     * List Warehouses
     */
    async listWarehouses(): Promise<ListWarehousesResponseBody> {
        const response = await this.listWarehousesRaw();
        return await response.value();
    }

    /**
     * Update Warehouse object information
     * Update WareHouse By Id
     */
    async updateWarehouseRaw(requestParameters: UpdateWarehouseRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.warehouseId === null || requestParameters.warehouseId === undefined) {
            throw new runtime.RequiredError('warehouseId','Required parameter requestParameters.warehouseId was null or undefined when calling updateWarehouse.');
        }

        if (requestParameters.updateWarehouseRequestBody === null || requestParameters.updateWarehouseRequestBody === undefined) {
            throw new runtime.RequiredError('updateWarehouseRequestBody','Required parameter requestParameters.updateWarehouseRequestBody was null or undefined when calling updateWarehouse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/warehouses/{warehouse_id}`.replace(`{${"warehouse_id"}}`, encodeURIComponent(String(requestParameters.warehouseId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateWarehouseRequestBodyToJSON(requestParameters.updateWarehouseRequestBody),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Update Warehouse object information
     * Update WareHouse By Id
     */
    async updateWarehouse(requestParameters: UpdateWarehouseRequest): Promise<string> {
        const response = await this.updateWarehouseRaw(requestParameters);
        return await response.value();
    }

}
