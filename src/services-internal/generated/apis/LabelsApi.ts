/* tslint:disable */
/* eslint-disable */
/**
 * ShipEngine API
 * ShipEngine\'s easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine\'s features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you\'re new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don\'t know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202010261510
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateLabelFromRateRequestBody,
    CreateLabelFromRateRequestBodyFromJSON,
    CreateLabelFromRateRequestBodyToJSON,
    CreateLabelFromRateResponseBody,
    CreateLabelFromRateResponseBodyFromJSON,
    CreateLabelFromRateResponseBodyToJSON,
    CreateLabelFromShipmentRequestBody,
    CreateLabelFromShipmentRequestBodyFromJSON,
    CreateLabelFromShipmentRequestBodyToJSON,
    CreateLabelFromShipmentResponseBody,
    CreateLabelFromShipmentResponseBodyFromJSON,
    CreateLabelFromShipmentResponseBodyToJSON,
    CreateLabelRequestBody,
    CreateLabelRequestBodyFromJSON,
    CreateLabelRequestBodyToJSON,
    CreateLabelResponseBody,
    CreateLabelResponseBodyFromJSON,
    CreateLabelResponseBodyToJSON,
    CreateReturnLabelRequestBody,
    CreateReturnLabelRequestBodyFromJSON,
    CreateReturnLabelRequestBodyToJSON,
    CreateReturnLabelResponseBody,
    CreateReturnLabelResponseBodyFromJSON,
    CreateReturnLabelResponseBodyToJSON,
    ErrorResponseBody,
    ErrorResponseBodyFromJSON,
    ErrorResponseBodyToJSON,
    GetLabelByExternalShipmentIdResponseBody,
    GetLabelByExternalShipmentIdResponseBodyFromJSON,
    GetLabelByExternalShipmentIdResponseBodyToJSON,
    GetLabelByIdResponseBody,
    GetLabelByIdResponseBodyFromJSON,
    GetLabelByIdResponseBodyToJSON,
    GetTrackingLogFromLabelResponseBody,
    GetTrackingLogFromLabelResponseBodyFromJSON,
    GetTrackingLogFromLabelResponseBodyToJSON,
    Label,
    LabelFromJSON,
    LabelToJSON,
    LabelDownloadType,
    LabelDownloadTypeFromJSON,
    LabelDownloadTypeToJSON,
    LabelStatus,
    LabelStatusFromJSON,
    LabelStatusToJSON,
    ListLabelsResponseBody,
    ListLabelsResponseBodyFromJSON,
    ListLabelsResponseBodyToJSON,
    PurchaseLabelWithoutShipment,
    PurchaseLabelWithoutShipmentFromJSON,
    PurchaseLabelWithoutShipmentToJSON,
    SortDir,
    SortDirFromJSON,
    SortDirToJSON,
    VoidLabelResponseBody,
    VoidLabelResponseBodyFromJSON,
    VoidLabelResponseBodyToJSON,
} from '../models';

export interface CreateLabelRequest {
    createLabelRequestBody: CreateLabelRequestBody;
}

export interface CreateLabelFromRateRequest {
    rateId: string;
    createLabelFromRateRequestBody: CreateLabelFromRateRequestBody;
}

export interface CreateLabelFromShipmentRequest {
    shipmentId: string;
    createLabelFromShipmentRequestBody: CreateLabelFromShipmentRequestBody;
}

export interface CreateReturnLabelRequest {
    labelId: string;
    createReturnLabelRequestBody: CreateReturnLabelRequestBody;
}

export interface GetLabelByExternalShipmentIdRequest {
    externalShipmentId: string;
    labelDownloadType?: LabelDownloadType;
}

export interface GetLabelByIdRequest {
    labelId: string;
    labelDownloadType?: LabelDownloadType;
}

export interface GetTrackingLogFromLabelRequest {
    labelId: string;
}

export interface ListLabelsRequest {
    labelStatus?: LabelStatus;
    serviceCode?: string;
    carrierId?: string;
    trackingNumber?: string;
    batchId?: string;
    rateId?: string;
    shipmentId?: string;
    warehouseId?: string;
    createdAtStart?: Date;
    createdAtEnd?: Date;
    page?: number;
    pageSize?: number;
    sortDir?: SortDir;
    sortBy?: ListLabelsSortByEnum;
}

export interface VoidLabelRequest {
    labelId: string;
}

/**
 * 
 */
export class LabelsApi extends runtime.BaseAPI {

    /**
     * Purchase and print a label for shipment
     * Purchase Label
     */
    async createLabelRaw(requestParameters: CreateLabelRequest): Promise<runtime.ApiResponse<CreateLabelResponseBody>> {
        if (requestParameters.createLabelRequestBody === null || requestParameters.createLabelRequestBody === undefined) {
            throw new runtime.RequiredError('createLabelRequestBody','Required parameter requestParameters.createLabelRequestBody was null or undefined when calling createLabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/labels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLabelRequestBodyToJSON(requestParameters.createLabelRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateLabelResponseBodyFromJSON(jsonValue));
    }

    /**
     * Purchase and print a label for shipment
     * Purchase Label
     */
    async createLabel(requestParameters: CreateLabelRequest): Promise<CreateLabelResponseBody> {
        const response = await this.createLabelRaw(requestParameters);
        return await response.value();
    }

    /**
     * When retrieving rates for shipments using the `/rates` endpoint, the returned information contains a `rate_id` property that can be used to generate a label without having to refill in the shipment information repeatedly. 
     * Purchase Label with Rate ID
     */
    async createLabelFromRateRaw(requestParameters: CreateLabelFromRateRequest): Promise<runtime.ApiResponse<CreateLabelFromRateResponseBody>> {
        if (requestParameters.rateId === null || requestParameters.rateId === undefined) {
            throw new runtime.RequiredError('rateId','Required parameter requestParameters.rateId was null or undefined when calling createLabelFromRate.');
        }

        if (requestParameters.createLabelFromRateRequestBody === null || requestParameters.createLabelFromRateRequestBody === undefined) {
            throw new runtime.RequiredError('createLabelFromRateRequestBody','Required parameter requestParameters.createLabelFromRateRequestBody was null or undefined when calling createLabelFromRate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/labels/rates/{rate_id}`.replace(`{${"rate_id"}}`, encodeURIComponent(String(requestParameters.rateId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLabelFromRateRequestBodyToJSON(requestParameters.createLabelFromRateRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateLabelFromRateResponseBodyFromJSON(jsonValue));
    }

    /**
     * When retrieving rates for shipments using the `/rates` endpoint, the returned information contains a `rate_id` property that can be used to generate a label without having to refill in the shipment information repeatedly. 
     * Purchase Label with Rate ID
     */
    async createLabelFromRate(requestParameters: CreateLabelFromRateRequest): Promise<CreateLabelFromRateResponseBody> {
        const response = await this.createLabelFromRateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Purchase a label using a shipment ID that has already been created with the desired address and package info. 
     * Purchase Label with Shipment ID
     */
    async createLabelFromShipmentRaw(requestParameters: CreateLabelFromShipmentRequest): Promise<runtime.ApiResponse<CreateLabelFromShipmentResponseBody>> {
        if (requestParameters.shipmentId === null || requestParameters.shipmentId === undefined) {
            throw new runtime.RequiredError('shipmentId','Required parameter requestParameters.shipmentId was null or undefined when calling createLabelFromShipment.');
        }

        if (requestParameters.createLabelFromShipmentRequestBody === null || requestParameters.createLabelFromShipmentRequestBody === undefined) {
            throw new runtime.RequiredError('createLabelFromShipmentRequestBody','Required parameter requestParameters.createLabelFromShipmentRequestBody was null or undefined when calling createLabelFromShipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/labels/shipment/{shipment_id}`.replace(`{${"shipment_id"}}`, encodeURIComponent(String(requestParameters.shipmentId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLabelFromShipmentRequestBodyToJSON(requestParameters.createLabelFromShipmentRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateLabelFromShipmentResponseBodyFromJSON(jsonValue));
    }

    /**
     * Purchase a label using a shipment ID that has already been created with the desired address and package info. 
     * Purchase Label with Shipment ID
     */
    async createLabelFromShipment(requestParameters: CreateLabelFromShipmentRequest): Promise<CreateLabelFromShipmentResponseBody> {
        const response = await this.createLabelFromShipmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a return label
     * Create a return label
     */
    async createReturnLabelRaw(requestParameters: CreateReturnLabelRequest): Promise<runtime.ApiResponse<CreateReturnLabelResponseBody>> {
        if (requestParameters.labelId === null || requestParameters.labelId === undefined) {
            throw new runtime.RequiredError('labelId','Required parameter requestParameters.labelId was null or undefined when calling createReturnLabel.');
        }

        if (requestParameters.createReturnLabelRequestBody === null || requestParameters.createReturnLabelRequestBody === undefined) {
            throw new runtime.RequiredError('createReturnLabelRequestBody','Required parameter requestParameters.createReturnLabelRequestBody was null or undefined when calling createReturnLabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/labels/{label_id}/return`.replace(`{${"label_id"}}`, encodeURIComponent(String(requestParameters.labelId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateReturnLabelRequestBodyToJSON(requestParameters.createReturnLabelRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateReturnLabelResponseBodyFromJSON(jsonValue));
    }

    /**
     * Create a return label
     * Create a return label
     */
    async createReturnLabel(requestParameters: CreateReturnLabelRequest): Promise<CreateReturnLabelResponseBody> {
        const response = await this.createReturnLabelRaw(requestParameters);
        return await response.value();
    }

    /**
     * Find a label by using the external shipment id that was used during label creation 
     * Get Label By External Shipment ID
     */
    async getLabelByExternalShipmentIdRaw(requestParameters: GetLabelByExternalShipmentIdRequest): Promise<runtime.ApiResponse<GetLabelByExternalShipmentIdResponseBody>> {
        if (requestParameters.externalShipmentId === null || requestParameters.externalShipmentId === undefined) {
            throw new runtime.RequiredError('externalShipmentId','Required parameter requestParameters.externalShipmentId was null or undefined when calling getLabelByExternalShipmentId.');
        }

        const queryParameters: any = {};

        if (requestParameters.labelDownloadType !== undefined) {
            queryParameters['label_download_type'] = requestParameters.labelDownloadType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/labels/external_shipment_id/{external_shipment_id}`.replace(`{${"external_shipment_id"}}`, encodeURIComponent(String(requestParameters.externalShipmentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLabelByExternalShipmentIdResponseBodyFromJSON(jsonValue));
    }

    /**
     * Find a label by using the external shipment id that was used during label creation 
     * Get Label By External Shipment ID
     */
    async getLabelByExternalShipmentId(requestParameters: GetLabelByExternalShipmentIdRequest): Promise<GetLabelByExternalShipmentIdResponseBody> {
        const response = await this.getLabelByExternalShipmentIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve information for individual labels.
     * Get Label By ID
     */
    async getLabelByIdRaw(requestParameters: GetLabelByIdRequest): Promise<runtime.ApiResponse<GetLabelByIdResponseBody>> {
        if (requestParameters.labelId === null || requestParameters.labelId === undefined) {
            throw new runtime.RequiredError('labelId','Required parameter requestParameters.labelId was null or undefined when calling getLabelById.');
        }

        const queryParameters: any = {};

        if (requestParameters.labelDownloadType !== undefined) {
            queryParameters['label_download_type'] = requestParameters.labelDownloadType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/labels/{label_id}`.replace(`{${"label_id"}}`, encodeURIComponent(String(requestParameters.labelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLabelByIdResponseBodyFromJSON(jsonValue));
    }

    /**
     * Retrieve information for individual labels.
     * Get Label By ID
     */
    async getLabelById(requestParameters: GetLabelByIdRequest): Promise<GetLabelByIdResponseBody> {
        const response = await this.getLabelByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve the label\'s tracking information
     * Get Label Tracking Information
     */
    async getTrackingLogFromLabelRaw(requestParameters: GetTrackingLogFromLabelRequest): Promise<runtime.ApiResponse<GetTrackingLogFromLabelResponseBody>> {
        if (requestParameters.labelId === null || requestParameters.labelId === undefined) {
            throw new runtime.RequiredError('labelId','Required parameter requestParameters.labelId was null or undefined when calling getTrackingLogFromLabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/labels/{label_id}/track`.replace(`{${"label_id"}}`, encodeURIComponent(String(requestParameters.labelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTrackingLogFromLabelResponseBodyFromJSON(jsonValue));
    }

    /**
     * Retrieve the label\'s tracking information
     * Get Label Tracking Information
     */
    async getTrackingLogFromLabel(requestParameters: GetTrackingLogFromLabelRequest): Promise<GetTrackingLogFromLabelResponseBody> {
        const response = await this.getTrackingLogFromLabelRaw(requestParameters);
        return await response.value();
    }

    /**
     * This endpoint returns a list of labels that you\'ve [created](https://www.shipengine.com/docs/labels/create-a-label/). You can optionally filter the results as well as control their sort order and the number of results returned at a time.  By default, all labels are returned, 25 at a time, starting with the most recently created ones.  You can combine multiple filter options to narrow-down the results.  For example, if you only want to get your UPS labels for your east coast warehouse you could query by both `warehouse_id` and `carrier_id` 
     * List labels
     */
    async listLabelsRaw(requestParameters: ListLabelsRequest): Promise<runtime.ApiResponse<ListLabelsResponseBody>> {
        const queryParameters: any = {};

        if (requestParameters.labelStatus !== undefined) {
            queryParameters['label_status'] = requestParameters.labelStatus;
        }

        if (requestParameters.serviceCode !== undefined) {
            queryParameters['service_code'] = requestParameters.serviceCode;
        }

        if (requestParameters.carrierId !== undefined) {
            queryParameters['carrier_id'] = requestParameters.carrierId;
        }

        if (requestParameters.trackingNumber !== undefined) {
            queryParameters['tracking_number'] = requestParameters.trackingNumber;
        }

        if (requestParameters.batchId !== undefined) {
            queryParameters['batch_id'] = requestParameters.batchId;
        }

        if (requestParameters.rateId !== undefined) {
            queryParameters['rate_id'] = requestParameters.rateId;
        }

        if (requestParameters.shipmentId !== undefined) {
            queryParameters['shipment_id'] = requestParameters.shipmentId;
        }

        if (requestParameters.warehouseId !== undefined) {
            queryParameters['warehouse_id'] = requestParameters.warehouseId;
        }

        if (requestParameters.createdAtStart !== undefined) {
            queryParameters['created_at_start'] = (requestParameters.createdAtStart as any).toISOString();
        }

        if (requestParameters.createdAtEnd !== undefined) {
            queryParameters['created_at_end'] = (requestParameters.createdAtEnd as any).toISOString();
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.sortDir !== undefined) {
            queryParameters['sort_dir'] = requestParameters.sortDir;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sort_by'] = requestParameters.sortBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/labels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListLabelsResponseBodyFromJSON(jsonValue));
    }

    /**
     * This endpoint returns a list of labels that you\'ve [created](https://www.shipengine.com/docs/labels/create-a-label/). You can optionally filter the results as well as control their sort order and the number of results returned at a time.  By default, all labels are returned, 25 at a time, starting with the most recently created ones.  You can combine multiple filter options to narrow-down the results.  For example, if you only want to get your UPS labels for your east coast warehouse you could query by both `warehouse_id` and `carrier_id` 
     * List labels
     */
    async listLabels(requestParameters: ListLabelsRequest): Promise<ListLabelsResponseBody> {
        const response = await this.listLabelsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Void a label by ID to get a refund.
     * Void a Label By ID
     */
    async voidLabelRaw(requestParameters: VoidLabelRequest): Promise<runtime.ApiResponse<VoidLabelResponseBody>> {
        if (requestParameters.labelId === null || requestParameters.labelId === undefined) {
            throw new runtime.RequiredError('labelId','Required parameter requestParameters.labelId was null or undefined when calling voidLabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/labels/{label_id}/void`.replace(`{${"label_id"}}`, encodeURIComponent(String(requestParameters.labelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VoidLabelResponseBodyFromJSON(jsonValue));
    }

    /**
     * Void a label by ID to get a refund.
     * Void a Label By ID
     */
    async voidLabel(requestParameters: VoidLabelRequest): Promise<VoidLabelResponseBody> {
        const response = await this.voidLabelRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ListLabelsSortByEnum {
    ModifiedAt = 'modified_at',
    CreatedAt = 'created_at'
}
