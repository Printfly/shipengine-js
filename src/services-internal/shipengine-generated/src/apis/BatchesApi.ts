/* tslint:disable */
/* eslint-disable */
/**
 * ShipEngine API
 * ShipEngine\'s easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine\'s features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you\'re new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don\'t know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202010261510
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateBatchRequestBody1,
    CreateBatchRequestBody1FromJSON,
    CreateBatchRequestBody1ToJSON,
    ErrorResponseBody1,
    ErrorResponseBody1FromJSON,
    ErrorResponseBody1ToJSON,
    ListBatchErrorsResponseBody1,
    ListBatchErrorsResponseBody1FromJSON,
    ListBatchErrorsResponseBody1ToJSON,
    ListBatchesResponseBody1,
    ListBatchesResponseBody1FromJSON,
    ListBatchesResponseBody1ToJSON,
    ProcessBatchRequestBody1,
    ProcessBatchRequestBody1FromJSON,
    ProcessBatchRequestBody1ToJSON,
    UNKNOWN_BASE_TYPE,
    UNKNOWN_BASE_TYPEFromJSON,
    UNKNOWN_BASE_TYPEToJSON,
} from '../models';

export interface AddToBatchRequest {
    batchId: string;
    uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE;
}

export interface CreateBatchRequest {
    createBatchRequestBody1: CreateBatchRequestBody1;
}

export interface DeleteBatchRequest {
    batchId: string;
}

export interface GetBatchByExternalIdRequest {
    externalBatchId: string;
}

export interface GetBatchByIdRequest {
    batchId: string;
}

export interface ListBatchErrorsRequest {
    batchId: string;
    page?: number;
    pagesize?: number;
}

export interface ListBatchesRequest {
    status?: ListBatchesStatusEnum;
    page?: number;
    pageSize?: number;
    sortDir?: string;
    batchNumber?: string;
    sortBy?: ListBatchesSortByEnum;
}

export interface ProcessBatchRequest {
    batchId: string;
    processBatchRequestBody1: ProcessBatchRequestBody1;
}

export interface RemoveFromBatchRequest {
    batchId: string;
    uNKNOWNBASETYPE: UNKNOWN_BASE_TYPE;
}

export interface UpdateBatchRequest {
    batchId: string;
}

/**
 * 
 */
export class BatchesApi extends runtime.BaseAPI {

    /**
     * Add a Shipment or Rate to a Batch
     * Add to a Batch
     */
    async addToBatchRaw(requestParameters: AddToBatchRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.batchId === null || requestParameters.batchId === undefined) {
            throw new runtime.RequiredError('batchId','Required parameter requestParameters.batchId was null or undefined when calling addToBatch.');
        }

        if (requestParameters.uNKNOWNBASETYPE === null || requestParameters.uNKNOWNBASETYPE === undefined) {
            throw new runtime.RequiredError('uNKNOWNBASETYPE','Required parameter requestParameters.uNKNOWNBASETYPE was null or undefined when calling addToBatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/batches/{batch_id}/add`.replace(`{${"batch_id"}}`, encodeURIComponent(String(requestParameters.batchId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UNKNOWN_BASE_TYPEToJSON(requestParameters.uNKNOWNBASETYPE),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Add a Shipment or Rate to a Batch
     * Add to a Batch
     */
    async addToBatch(requestParameters: AddToBatchRequest): Promise<string> {
        const response = await this.addToBatchRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a Batch
     * Create A Batch
     */
    async createBatchRaw(requestParameters: CreateBatchRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.createBatchRequestBody1 === null || requestParameters.createBatchRequestBody1 === undefined) {
            throw new runtime.RequiredError('createBatchRequestBody1','Required parameter requestParameters.createBatchRequestBody1 was null or undefined when calling createBatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/batches`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateBatchRequestBody1ToJSON(requestParameters.createBatchRequestBody1),
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Create a Batch
     * Create A Batch
     */
    async createBatch(requestParameters: CreateBatchRequest): Promise<object> {
        const response = await this.createBatchRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete Batch By Id
     * Delete Batch By Id
     */
    async deleteBatchRaw(requestParameters: DeleteBatchRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.batchId === null || requestParameters.batchId === undefined) {
            throw new runtime.RequiredError('batchId','Required parameter requestParameters.batchId was null or undefined when calling deleteBatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/batches/{batch_id}`.replace(`{${"batch_id"}}`, encodeURIComponent(String(requestParameters.batchId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete Batch By Id
     * Delete Batch By Id
     */
    async deleteBatch(requestParameters: DeleteBatchRequest): Promise<string> {
        const response = await this.deleteBatchRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Batch By External ID
     * Get Batch By External ID
     */
    async getBatchByExternalIdRaw(requestParameters: GetBatchByExternalIdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.externalBatchId === null || requestParameters.externalBatchId === undefined) {
            throw new runtime.RequiredError('externalBatchId','Required parameter requestParameters.externalBatchId was null or undefined when calling getBatchByExternalId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/batches/external_batch_id/{external_batch_id}`.replace(`{${"external_batch_id"}}`, encodeURIComponent(String(requestParameters.externalBatchId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Batch By External ID
     * Get Batch By External ID
     */
    async getBatchByExternalId(requestParameters: GetBatchByExternalIdRequest): Promise<object> {
        const response = await this.getBatchByExternalIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get Batch By ID
     * Get Batch By ID
     */
    async getBatchByIdRaw(requestParameters: GetBatchByIdRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.batchId === null || requestParameters.batchId === undefined) {
            throw new runtime.RequiredError('batchId','Required parameter requestParameters.batchId was null or undefined when calling getBatchById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/batches/{batch_id}`.replace(`{${"batch_id"}}`, encodeURIComponent(String(requestParameters.batchId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get Batch By ID
     * Get Batch By ID
     */
    async getBatchById(requestParameters: GetBatchByIdRequest): Promise<object> {
        const response = await this.getBatchByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Error handling in batches are handled differently than in a single synchronous request. You must retrieve the status of your batch by [getting a batch](https://www.shipengine.com/docs/reference/get-batch-by-id/) and getting an overview of the statuses or you can list errors directly here below to get detailed information about the errors. 
     * Get Batch Errors
     */
    async listBatchErrorsRaw(requestParameters: ListBatchErrorsRequest): Promise<runtime.ApiResponse<ListBatchErrorsResponseBody1>> {
        if (requestParameters.batchId === null || requestParameters.batchId === undefined) {
            throw new runtime.RequiredError('batchId','Required parameter requestParameters.batchId was null or undefined when calling listBatchErrors.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pagesize !== undefined) {
            queryParameters['pagesize'] = requestParameters.pagesize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/batches/{batch_id}/errors`.replace(`{${"batch_id"}}`, encodeURIComponent(String(requestParameters.batchId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListBatchErrorsResponseBody1FromJSON(jsonValue));
    }

    /**
     * Error handling in batches are handled differently than in a single synchronous request. You must retrieve the status of your batch by [getting a batch](https://www.shipengine.com/docs/reference/get-batch-by-id/) and getting an overview of the statuses or you can list errors directly here below to get detailed information about the errors. 
     * Get Batch Errors
     */
    async listBatchErrors(requestParameters: ListBatchErrorsRequest): Promise<ListBatchErrorsResponseBody1> {
        const response = await this.listBatchErrorsRaw(requestParameters);
        return await response.value();
    }

    /**
     * List Batches associated with your Shipengine account
     * List Batches
     */
    async listBatchesRaw(requestParameters: ListBatchesRequest): Promise<runtime.ApiResponse<ListBatchesResponseBody1>> {
        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.sortDir !== undefined) {
            queryParameters['sort_dir'] = requestParameters.sortDir;
        }

        if (requestParameters.batchNumber !== undefined) {
            queryParameters['batch_number'] = requestParameters.batchNumber;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sort_by'] = requestParameters.sortBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/batches`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListBatchesResponseBody1FromJSON(jsonValue));
    }

    /**
     * List Batches associated with your Shipengine account
     * List Batches
     */
    async listBatches(requestParameters: ListBatchesRequest): Promise<ListBatchesResponseBody1> {
        const response = await this.listBatchesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Process Batch ID Labels
     * Process Batch ID Labels
     */
    async processBatchRaw(requestParameters: ProcessBatchRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.batchId === null || requestParameters.batchId === undefined) {
            throw new runtime.RequiredError('batchId','Required parameter requestParameters.batchId was null or undefined when calling processBatch.');
        }

        if (requestParameters.processBatchRequestBody1 === null || requestParameters.processBatchRequestBody1 === undefined) {
            throw new runtime.RequiredError('processBatchRequestBody1','Required parameter requestParameters.processBatchRequestBody1 was null or undefined when calling processBatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/batches/{batch_id}/process/labels`.replace(`{${"batch_id"}}`, encodeURIComponent(String(requestParameters.batchId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProcessBatchRequestBody1ToJSON(requestParameters.processBatchRequestBody1),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Process Batch ID Labels
     * Process Batch ID Labels
     */
    async processBatch(requestParameters: ProcessBatchRequest): Promise<string> {
        const response = await this.processBatchRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove a shipment or rate from a batch
     * Remove From Batch
     */
    async removeFromBatchRaw(requestParameters: RemoveFromBatchRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.batchId === null || requestParameters.batchId === undefined) {
            throw new runtime.RequiredError('batchId','Required parameter requestParameters.batchId was null or undefined when calling removeFromBatch.');
        }

        if (requestParameters.uNKNOWNBASETYPE === null || requestParameters.uNKNOWNBASETYPE === undefined) {
            throw new runtime.RequiredError('uNKNOWNBASETYPE','Required parameter requestParameters.uNKNOWNBASETYPE was null or undefined when calling removeFromBatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/batches/{batch_id}/remove`.replace(`{${"batch_id"}}`, encodeURIComponent(String(requestParameters.batchId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UNKNOWN_BASE_TYPEToJSON(requestParameters.uNKNOWNBASETYPE),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Remove a shipment or rate from a batch
     * Remove From Batch
     */
    async removeFromBatch(requestParameters: RemoveFromBatchRequest): Promise<string> {
        const response = await this.removeFromBatchRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update Batch By Id
     * Update Batch By Id
     */
    async updateBatchRaw(requestParameters: UpdateBatchRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.batchId === null || requestParameters.batchId === undefined) {
            throw new runtime.RequiredError('batchId','Required parameter requestParameters.batchId was null or undefined when calling updateBatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["API-Key"] = this.configuration.apiKey("API-Key"); // api_key authentication
        }

        const response = await this.request({
            path: `/v1/batches/{batch_id}`.replace(`{${"batch_id"}}`, encodeURIComponent(String(requestParameters.batchId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Update Batch By Id
     * Update Batch By Id
     */
    async updateBatch(requestParameters: UpdateBatchRequest): Promise<string> {
        const response = await this.updateBatchRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ListBatchesStatusEnum {
    Open = 'open',
    Queued = 'queued',
    Processing = 'processing',
    Completed = 'completed',
    CompletedWithErrors = 'completed_with_errors',
    Archived = 'archived',
    Notifying = 'notifying',
    Invalid = 'invalid'
}
/**
    * @export
    * @enum {string}
    */
export enum ListBatchesSortByEnum {
    ShipDate = 'ship_date',
    ProcessedAt = 'processed_at',
    CreatedAt = 'created_at'
}
